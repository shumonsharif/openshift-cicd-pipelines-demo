apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: hello-ci-trigger-template
  namespace: hello-dev
spec:
  params:
    - name: GIT_URL
    - name: GIT_REVISION
    - name: APPLICATION
    - name: PROJECT_PREFFIX
    - name: CONTEXT_PATH
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        generateName: hello-ci-pipeline-run-
      spec:
        pipelineRef:
          name: hello-ci-pipeline
        params:
          - name: GIT_URL
            value: $(tt.params.GIT_URL)
          - name: GIT_REVISION
            value: $(tt.params.GIT_REVISION)
          - name: APPLICATION
            value: $(tt.params.APPLICATION)
          - name: PROJECT_PREFFIX
            value: $(tt.params.PROJECT_PREFFIX)
          - name: CONTEXT_PATH
            value: $(tt.params.CONTEXT_PATH)
        podTemplate:
          securityContext:
            # This tells Kubernetes to make the volume's contents owned
            # by this group ID, making it writable by the container.
            fsGroup: 65534            
        workspaces:
          - name: source
            persistentVolumeClaim:
              claimName: hello-pvc
            subPath: hello-ci
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: hello-cd-trigger-template
  namespace: hello-dev
spec:
  params:
    - name: GIT_URL
    - name: GIT_REVISION
    - name: APPLICATION
    - name: PROJECT_PREFFIX
    - name: CONTEXT_PATH
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        name: hello-cd-pipeline-run-$(uid)
      spec:
        pipelineRef:
          name: hello-cd-pipeline
        params:
          - name: GIT_URL
            value: $(tt.params.GIT_URL)
          - name: GIT_REVISION
            value: $(tt.params.GIT_REVISION)
          - name: APPLICATION
            value: $(tt.params.APPLICATION)
          - name: PROJECT_PREFFIX
            value: $(tt.params.PROJECT_PREFFIX)
          - name: CONTEXT_PATH
            value: $(tt.params.CONTEXT_PATH)
        podTemplate:
          securityContext:
            # This tells Kubernetes to make the volume's contents owned
            # by this group ID, making it writable by the container.
            fsGroup: 65534
        workspaces:
          - name: source
            persistentVolumeClaim:
              claimName: hello-pvc
            subPath: hello-cd
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: github-binding
  namespace: hello-dev
spec:
  params:
    - name: GIT_URL
      value: $(body.repository.url)
    - name: GIT_REVISION
      value: $(body.head_commit.id)
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: hello-binding
  namespace: hello-dev
spec:
  params:
    - name: APPLICATION
      value: hello
    - name: PROJECT_PREFFIX
      value: hello
    - name: CONTEXT_PATH
      value: ./application
---
apiVersion: triggers.tekton.dev/v1beta1
kind: EventListener
metadata:
  name: hello-event-listener
  namespace: hello-dev
spec:
  serviceAccountName: triggers
  triggers:
    - name: hello-ci-event-listener
      interceptors:
        - name: "Filter for develop branch"
          ref:
            name: "cel"
            kind: "ClusterInterceptor"
          params:
            - name: "filter"
              value: "body.ref.contains('develop')"
        - name: "GitHub Validation"
          ref:
            name: "github"
            kind: "ClusterInterceptor"
          params:
            - name: secretRef
              value:
                secretName: github-secret
                secretKey: secretToken
            - name: eventTypes
              value: ["push"]
      bindings:
        - ref: github-binding
        - ref: hello-binding
      template:
        ref: hello-ci-trigger-template
    - name: hello-cd-event-listener
      interceptors:
        - name: "Filter for master branch"
          ref:
            name: "cel"
            kind: "ClusterInterceptor"
          params:
            - name: "filter"
              value: "body.ref.contains('master')"
        - name: "GitHub Validation"
          ref:
            name: "github"
            kind: "ClusterInterceptor"
          params:
            - name: secretRef
              value:
                secretName: github-secret
                secretKey: secretToken
            - name: eventTypes
              value: ["push"]
      bindings:
        - ref: github-binding
        - ref: hello-binding
      template:
        ref: hello-cd-trigger-template
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: el-hello-event-listener
  namespace: hello-dev
spec:
  port:
    targetPort: http-listener
  to:
    kind: Service
    name: el-hello-event-listener
---
apiVersion: v1
kind: Secret
metadata:
  name: github-secret
  namespace: hello-dev
type: Opaque
stringData:
  secretToken: "h3ll0-d3m0"